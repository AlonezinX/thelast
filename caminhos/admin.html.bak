<!DOCTYPE html>
<html lang="pt-br">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Administração - The Last Lion</title>
<style>
        /* Reset de estilos */
        * {
            box-sizing: border-box;
            margin: 0;
            padding: 0;
        }

        body {
            font-family: Arial, sans-serif;
            background-color: #f8f8f8;
            color: #333;
            margin: 0;
            padding: 0;
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
        }

        .admin-panel {
            text-align: center;
            padding: 20px;
            border: 1px solid #ccc;
            border-radius: 5px;
            background-color: #fff;
            box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
            width: 300px;
        }

        h1 {
            margin-bottom: 20px;
        }
        
        h2 {
            font-size: 16px;
            margin-bottom: 10px;
        }
        
        h3 {
            font-size: 13px;
        }

        button {
            padding: 10px 20px;
            margin: 5px;
            font-size: 16px;
            background-color: #007bff;
            color: #fff;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            transition: background-color 0.3s ease;
            width: 100%;
        }

        button:hover {
            background-color: #0056b3;
        }

        #options {
            margin-top: 20px;
            display: flex;
            opacity: 0;
            flex-direction: column;
            align-items: center;
            transition: opacity 0.3s ease;
        }

        #options.show {
            opacity: 1;
        }

        #options button {
            margin: 5px;
            opacity: 0;
            transition: opacity 0.3s ease;
            width: 100%;
        }
        
        #user-list {
        margin-bottom: 5px;
        }

        #options.show button {
            opacity: 1;
        }

        /* Estilo dos botões dentro das opções de personagens */
        #personagens-options button {
            display: block;
        }
    </style>
</head>
<body>
    <div class="admin-panel">
        <h1>Painel de Administração</h1>
        <button id="personagens-btn">Personagens</button>
        <button id="volumes-btn">Volumes</button>
        <!-- Adicione o botão Usuários -->
        <button id="users-btn">Usuários</button>
        <div id="options">
            <div id="personagens-options" style="display: none;">
                <button onclick="location.href='/personagem'">Adicionar Personagem</button>
                <button onclick="editCharacter()">Editar Personagem</button>
                <button onclick="deleteCharacter()">Deletar Personagem</button>
            </div>
            <div id="volumes-options" style="display: none;">
                <button onclick="location.href='/adicionar-volume'">Adicionar Volume</button>
                <button onclick="deleteVolume()">Deletar Volume</button>
            </div>
            <!-- Div para exibir a lista de usuários -->
           <div id="users-options" style="display: none;">
                <h2>Usuários Cadastrados:</h2>
                <ul id="user-list"></ul>
                <div id="user-info" style="display: none;">
                    <h3>Informações do Usuário:</h3>
                    <p><strong>Usuário:</strong> <span id="info-username"></span></p>
                    <p><strong>Senha:</strong> <span id="info-password"></span></p>
                    <p><strong>Data de Criação:</strong> <span id="info-creation-date"></span></p>
                    <p><strong>Hora de Criação:</strong> <span id="info-creation-time"></span></p>
                </div>
        </div>
    </div>
    <script>

        function editCharacter() {
            const volume = prompt("Digite o número do volume que deseja editar:");
            if (volume) {
                fetch(`/listar-personagens?volume=${volume}`)
                    .then(response => response.json())
                    .then(data => {
                        if (data.length === 0) {
                            alert(`Não há personagens cadastrados no volume ${volume}.`);
                        } else {
                            // Mostrar a lista de personagens do volume selecionado para edição
                            let personagensList = "Lista de Personagens:\n";
                            data.forEach(personagem => {
                                personagensList += `- ${personagem.nome}\n`;
                            });
                            const personagemSelecionado = prompt(personagensList + "\nDigite o nome do personagem que deseja editar:");
                            if (personagemSelecionado) {
                                // Redirecionar para a página de edição do personagem
                                window.location.href = `/EditarPersonagem?volumeNumero=${volume}&novoNome=${personagemSelecionado}&nomeAntigo=${personagemSelecionado}`;
                            }
                        }
                    })
                    .catch(error => {
                        console.error('Erro ao obter dados dos personagens:', error);
                        alert("Ocorreu um erro ao carregar a lista de personagens.");
                    });
            }
        }

        function addNewVolume() {
            window.location.href = "/adicionar-volume";
        }

        function deleteVolume() {
            const volumeNumber = prompt("Digite o número do volume que deseja deletar:");
            if (volumeNumber) {
                fetch(`/delete-volume/${volumeNumber}`, {
                    method: 'DELETE',
                    headers: {
                        'Content-Type': 'application/json'
                    }
                })
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Erro ao deletar o volume.');
                    }
                    return response.json();
                })
                .then(data => {
                    alert(data.message);
                    // Aqui você pode adicionar qualquer ação adicional após a exclusão do volume
                })
                .catch(error => {
                    console.error('Erro ao deletar o volume:', error);
                    alert('Ocorreu um erro ao deletar o volume.');
                });
            }
        }

        function deleteCharacter() {
            const volumeNumber = prompt("Digite o número do volume do personagem:");
            
            if (volumeNumber) {
                fetch(`/list-characters/${volumeNumber}`)
                    .then(response => response.json())
                    .then(characters => {
                        if (characters.length === 0) {
                            alert(`Não há personagens cadastrados no Volume ${volumeNumber}.`);
                            return;
                        }
                        
                        let characterList = "Lista de Personagens:\n";
                        characters.forEach(character => {
                            characterList += `- ${character.nome}\n`;
                        });

                        const characterName = prompt(characterList + "\nDigite o nome do personagem que deseja deletar:");

                        if (characterName) {
                            deleteCharacterFromVolume(volumeNumber, characterName);
                        }
                    })
                    .catch(error => {
                        console.error('Erro ao obter dados dos personagens:', error);
                        alert('Ocorreu um erro ao carregar a lista de personagens.');
                    });
            }
        }

        function deleteCharacterFromVolume(volumeNumber, characterName) {
            fetch(`/delete-character/${volumeNumber}/${characterName}`, {
                method: 'DELETE',
                headers: {
                    'Content-Type': 'application/json'
                }
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error('Erro ao deletar o personagem.');
                }
                return response.json();
            })
            .then(data => {
                alert(data.message);
                // Aqui você pode adicionar qualquer ação adicional após a exclusão do personagem
            })
            .catch(error => {
                console.error('Erro ao deletar o personagem:', error);
                alert('Ocorreu um erro ao deletar o personagem.');
            });
        }
    
         document.addEventListener('DOMContentLoaded', function() {
            const options = document.getElementById('options');
            const personagensBtn = document.getElementById('personagens-btn');
            const volumesBtn = document.getElementById('volumes-btn');
            const usersBtn = document.getElementById('users-btn'); // Botão Usuários
            const personagensOptions = document.getElementById('personagens-options');
            const volumesOptions = document.getElementById('volumes-options');
            const usersOptions = document.getElementById('users-options'); // Div para exibir a lista de usuários
            const userList = document.getElementById('user-list'); // Lista de usuários
            const userInfo = document.getElementById('user-info'); // Div para exibir informações do usuário

            personagensBtn.addEventListener('click', function() {
                toggleOptions(personagensOptions);
            });

            volumesBtn.addEventListener('click', function() {
                toggleOptions(volumesOptions);
            });

            // Adicione um evento de clique para o botão Usuários
            usersBtn.addEventListener('click', function() {
                fetchUsers(); // Quando clicado, chame a função fetchUsers
                toggleOptions(usersOptions);
            });

            function toggleOptions(optionDiv) {
                if (options.classList.contains('show')) {
                    options.classList.remove('show');
                    setTimeout(() => {
                        optionDiv.style.display = 'none';
                    }, 300);
                } else {
                    optionDiv.style.display = 'block';
                    setTimeout(() => {
                        options.classList.add('show');
                    }, 10);
                }
            }

            // Função para buscar e exibir a lista de usuários
            function fetchUsers() {
                fetch('/users')
                    .then(response => response.json())
                    .then(data => {
                        userList.innerHTML = ''; // Limpa a lista antes de adicionar os novos usuários
                        data.forEach(user => {
                            const listItem = document.createElement('li');
                            listItem.textContent = user.username;
                            // Adicione um evento de clique para exibir as informações do usuário
                            listItem.addEventListener('click', () => {
                                toggleUserInfo(user);
                            });
                            userList.appendChild(listItem);
                        });
                    })
                    .catch(error => {
                        console.error('Erro ao obter a lista de usuários:', error);
                        alert('Ocorreu um erro ao obter a lista de usuários.');
                    });
            }

            // Função para exibir/ocultar as informações do usuário
            function toggleUserInfo(user) {
                const usernameInfo = document.getElementById('info-username');
                const passwordInfo = document.getElementById('info-password');
                const creationDateInfo = document.getElementById('info-creation-date');
                const creationTimeInfo = document.getElementById('info-creation-time');

                // Preencha as informações do usuário
                usernameInfo.textContent = user.username;
                passwordInfo.textContent = user.password;
                creationDateInfo.textContent = user.creationDate;
                creationTimeInfo.textContent = user.creationTime;

                // Alternar a exibição das informações do usuário
                if (userInfo.style.display === 'block') {
                    userInfo.style.display = 'none';
                } else {
                    userInfo.style.display = 'block';
                }
            }
        });
    </script>
</body>
</html>

